module {
  func @multiply_transpose(%arg0: !rise.array, %arg1: !rise.array)
  attributes  {rise.generic = true} {
    %0 = "rise.transpose"(%arg1) : (!rise.array) -> !rise.array loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":3:14)
    %1 = "rise.mul"(%arg0, %0) : (!rise.array, !rise.array) -> !rise.array loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":3:14)
    "rise.return"(%1) : (!rise.array) -> () loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":3:3)
  } loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":2:1)
  func @test(%arg0: !rise.array)
  attributes  {rise.generic = true} {
    %0 = "rise.constant"() {value = dense<[[1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]> : tensor<2x3xf64>} : () -> !rise.array<2, 3> loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":7:19)
    %1 = "rise.reshape"(%0) : (!rise.array<2, 3>) -> !rise.array<2, 3> loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":7:5)
    %2 = "rise.constant"() {value = dense<2.000000e+00> : tensor<1xf64>} : () -> !rise.array<1> loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":8:21)
    "rise.print"(%arg0) : (!rise.array) -> () loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":9:5)
    "rise.return"() : () -> () loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":6:1)
  } loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":6:1)
  func @main() {
    %0 = "rise.constant"() {value = dense<[[1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]> : tensor<2x3xf64>} : () -> !rise.array<2, 3> loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":13:17)
    %1 = "rise.reshape"(%0) : (!rise.array<2, 3>) -> !rise.array<2, 3> loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":13:3)
    %2 = "rise.constant"() {value = dense<[1.000000e+00, 2.000000e+00, 3.000000e+00, 4.000000e+00, 5.000000e+00, 6.000000e+00]> : tensor<6xf64>} : () -> !rise.array<6> loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":14:17)
    %3 = "rise.reshape"(%2) : (!rise.array<6>) -> !rise.array<2, 3> loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":14:3)
    %4 = "rise.generic_call"(%1, %3) {callee = "multiply_transpose"} : (!rise.array<2, 3>, !rise.array<2, 3>) -> !rise.array loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":15:11)
    %5 = "rise.generic_call"(%3, %1) {callee = "multiply_transpose"} : (!rise.array<2, 3>, !rise.array<2, 3>) -> !rise.array loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":16:11)
    "rise.print"(%5) : (!rise.array) -> () loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":17:3)
    %6 = "rise.constant"() {value = dense<2.000000e+00> : tensor<1xf64>} : () -> !rise.array<1> loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":19:17)
    %7 = "rise.generic_call"(%6) {callee = "Float"} : (!rise.array<1>) -> !rise.array loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":19:11)
    "rise.print"(%7) : (!rise.array) -> () loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":20:3)
    "rise.return"() : () -> () loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":12:1)
  } loc("../../projects/mlir/test/Dialect/Rise/simpleIRRecognitionExample.rise":12:1)
} loc(unknown)
